// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let clients = [];
let services = [];
let employees = [];
let expenses = [];
let editingClientId = null;
let editingServiceId = null;
let editingExpenseId = null;
let assigningServiceId = null;

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiCall(method, endpoint, data = null) {
    try {
        const options = {
            method: method,
            headers: { 'Content-Type': 'application/json' }
        };
        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(endpoint, options);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return await response.json();
    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ API: ' + error.message, 'error');
        throw error;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    try {
        showMessage('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 'info');
        clients = await apiCall('GET', '/api/clients');
        services = await apiCall('GET', '/api/services');
        employees = await apiCall('GET', '/api/employees');
        expenses = await apiCall('GET', '/api/expenses');
        updateStats();
        renderAll();
        showMessage('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, type = 'success') {
    const messagesDiv = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = text;
    messagesDiv.appendChild(messageDiv);

    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.remove();
        }
    }, 3000);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('[id^="tab-"]').forEach(content => content.classList.add('hidden'));

    event.target.classList.add('active');
    document.getElementById(`tab-${tabName}`).classList.remove('hidden');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('clientsCount').textContent = clients.length;
    document.getElementById('servicesCount').textContent = services.length;
    document.getElementById('employeesCount').textContent = employees.length;

    const connections = clients.reduce((total, client) => {
        const services = client.services || {};
        return total + Object.values(services).filter(s => s.Use === 1).length;
    }, 0);
    document.getElementById('connectionsCount').textContent = connections;

    // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ - –≤—Å–µ –≤ –≥—Ä–∏–≤–Ω–∞—Ö
    const totalSalaries = employees.reduce((sum, emp) => sum + (emp.salary || 0), 0);
    const totalExpenses = expenses.reduce((sum, exp) => sum + (exp.monthly_amount || 0), 0);

    document.getElementById('totalSalaries').textContent = totalSalaries.toLocaleString();
    document.getElementById('totalExpenses').textContent = totalExpenses.toFixed(2);
    document.getElementById('totalCosts').textContent = (totalSalaries + totalExpenses).toFixed(0);
}

// –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function renderAll() {
    renderClients();
    renderServices();
    renderEmployees();
    renderExpenses();
}

// –†–µ–Ω–¥–µ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
function renderClients() {
    const container = document.getElementById('clientsList');
    container.innerHTML = '';

    if (clients.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 40px; color: #6b7280;">–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é.</div>';
        return;
    }

    clients.forEach(client => {
        const clientDiv = document.createElement('div');
        clientDiv.className = 'client-card';

        const services = client.services || {};
        const activeServices = Object.entries(services).filter(([_, serviceData]) => serviceData.Use === 1);

        const servicesList = activeServices.length > 0
            ? activeServices.map(([serviceName, serviceData]) =>
                `<span class="tag tag-${serviceData.Type?.toLowerCase() || 'saas'}">${serviceName}</span>`
              ).join('')
            : '<span class="text-gray-500">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤</span>';

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        const metadata = client.metadata || {};
        let equipmentHtml = '';

        if (Object.keys(metadata).length > 0) {
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            const getEquipmentIcon = (category) => {
                const iconMap = {
                    '—Ä–∞–±–æ—á–∏–µ_–º–µ—Å—Ç–∞': 'üíª',
                    '–ø–µ—á–∞—Ç–Ω–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞': 'üñ®Ô∏è',
                    '—Å–µ—Ç–µ–≤–æ–µ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': 'üåê',
                    '–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ': 'üìπ',
                    'ip_—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è': '‚òéÔ∏è',
                    '—Å–µ—Ä–≤–µ—Ä–∞': 'üñ•Ô∏è',
                    'storage': 'üíæ',
                    '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 'üîí'
                };
                return iconMap[category] || '‚öôÔ∏è';
            };

            let totalEquipment = 0;
            let totalComplexity = 0;

            const equipmentSections = Object.entries(metadata).map(([category, data]) => {
                const icon = getEquipmentIcon(category);
                const categoryName = category.replace(/_/g, ' ').replace(/^\w/, c => c.toUpperCase());

                if (typeof data === 'object' && data !== null) {
                    if (data.count !== undefined && data.weight !== undefined) {
                        // –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –≤–µ—Å–æ–º
                        totalEquipment += data.count;
                        totalComplexity += data.count * data.weight;

                        return `
                            <div class="equipment-category">
                                <span class="font-medium" style="color: #374151;">
                                    ${icon} ${categoryName}: <strong class="green">${data.count}</strong> 
                                    <span class="text-xs text-gray-500">(–≤–µ—Å: ${data.weight})</span>
                                </span>
                            </div>
                        `;
                    } else {
                        // –°–ª–æ–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                        let categoryTotal = 0;
                        let categoryComplexity = 0;

                        const items = Object.entries(data).map(([item, itemData]) => {
                            let count, weight;
                            if (typeof itemData === 'object' && itemData.count !== undefined) {
                                count = itemData.count || 0;
                                weight = itemData.weight || 1;
                            } else {
                                // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                                count = parseInt(itemData) || 0;
                                weight = 1;
                            }

                            categoryTotal += count;
                            categoryComplexity += count * weight;

                            return `<span class="equipment-item">${item.replace(/_/g, ' ')}: <strong class="green">${count}</strong> <span class="text-xs text-gray-500">(${weight})</span></span>`;
                        }).join('');

                        totalEquipment += categoryTotal;
                        totalComplexity += categoryComplexity;

                        return `
                            <div class="equipment-category">
                                <div class="font-medium" style="color: #374151; margin-bottom: 4px;">
                                    ${icon} ${categoryName} (${categoryTotal}):
                                </div>
                                <div style="margin-left: 20px; display: flex; flex-wrap: wrap; gap: 6px;">
                                    ${items}
                                </div>
                            </div>
                        `;
                    }
                } else {
                    // –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                    const count = parseInt(data) || 0;
                    totalEquipment += count;
                    totalComplexity += count * 1; // –í–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 1

                    return `
                        <div class="equipment-category">
                            <span class="font-medium" style="color: #374151;">
                                ${icon} ${categoryName}: <strong class="green">${data}</strong>
                            </span>
                        </div>
                    `;
                }
            }).join('');

            equipmentHtml = `
                <div style="margin-top: 15px; padding: 15px; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 8px; border: 1px solid #e2e8f0;">
                    <h4 style="margin: 0 0 12px 0; font-size: 14px; color: #1f2937; display: flex; align-items: center; justify-content: space-between;">
                        <span>üìä –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞</span>
                        <div style="font-size: 12px; display: flex; gap: 10px;">
                            <span style="background: #3b82f6; color: white; padding: 2px 8px; border-radius: 12px;">
                                –í—Å–µ–≥–æ: ${totalEquipment} –µ–¥.
                            </span>
                            <span style="background: #f97316; color: white; padding: 2px 8px; border-radius: 12px;">
                                –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${totalComplexity.toFixed(1)}
                            </span>
                        </div>
                    </h4>
                    <div style="display: grid; gap: 8px; font-size: 13px;">
                        ${equipmentSections}
                    </div>
                </div>
            `;
        }

        clientDiv.innerHTML = `
            <div class="flex justify-between items-center mb-2">
                <div class="client-name">üè¢ ${client.name}</div>
                <div class="flex gap-2">
                    <button class="btn btn-primary btn-small" onclick="editClient(${client.id})">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                    <button class="btn btn-danger btn-small" onclick="deleteClient(${client.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
            <div class="text-sm">
                <p class="mb-2"><strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:</strong> ${activeServices.length}</p>
                <div>${servicesList}</div>
                ${equipmentHtml}
            </div>
        `;
        container.appendChild(clientDiv);
    });
}

// –†–µ–Ω–¥–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
function renderServices() {
    const container = document.getElementById('servicesList');
    container.innerHTML = '';

    if (services.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 40px; color: #6b7280;">–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é.</div>';
        return;
    }

    services.forEach(service => {
        const clientsUsingService = clients.filter(client =>
            client.services && client.services[service.name]?.Use === 1
        );

        const serviceDiv = document.createElement('div');
        serviceDiv.className = 'service-card';
        serviceDiv.innerHTML = `
            <div class="flex justify-between items-center mb-2">
                <div class="service-name">‚öôÔ∏è ${service.name}</div>
                <div class="flex gap-2">
                    <span class="tag tag-${service.type?.toLowerCase() || 'saas'}">${service.type || 'SaaS'}</span>
                    <button class="btn btn-success btn-small" onclick="assignServiceToClients(${service.id})">üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å</button>
                    <button class="btn btn-primary btn-small" onclick="editService(${service.id})">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                    <button class="btn btn-danger btn-small" onclick="deleteService(${service.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
            <div class="text-sm text-gray-600">
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${service.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <p><strong>–¢–∏–ø:</strong> ${service.type || 'SaaS'} | <strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${service.quality || 'Medium'}</p>
                <p><strong>–í–µ—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</strong> ${service.weight || 1} | <strong>–ö–ª–∏–µ–Ω—Ç–æ–≤:</strong> ${clientsUsingService.length}</p>
                <p style="color: #9ca3af; font-size: 12px;">–†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –≤–µ—Å—É</p>
            </div>
            ${clientsUsingService.length > 0 ? `
                <div style="margin-top: 8px;">
                    <strong>–ò—Å–ø–æ–ª—å–∑—É—é—Ç:</strong> ${clientsUsingService.map(c => c.name).join(', ')}
                </div>
            ` : ''}
        `;
        container.appendChild(serviceDiv);
    });
}

// –†–µ–Ω–¥–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function renderEmployees() {
    const container = document.getElementById('employeesList');
    container.innerHTML = '';

    if (employees.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 40px; color: #6b7280;">–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ç—Ä–∞—Ç.</div>';
        return;
    }

    employees.forEach(employee => {
        const employeeDiv = document.createElement('div');
        employeeDiv.className = 'employee-card';
        employeeDiv.innerHTML = `
            <div class="flex justify-between items-center">
                <div class="font-medium">üë§ ${employee.name}</div>
                <div class="font-bold green">‚Ç¥${employee.salary || 0}/–º–µ—Å</div>
            </div>
        `;
        container.appendChild(employeeDiv);
    });
}

// –†–µ–Ω–¥–µ—Ä –∑–∞—Ç—Ä–∞—Ç
function renderExpenses() {
    const container = document.getElementById('expensesList');
    container.innerHTML = '';

    if (expenses.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 20px; color: #6b7280;">–ù–µ—Ç –∑–∞—Ç—Ä–∞—Ç</div>';
        return;
    }

    expenses.forEach(expense => {
        const expenseDiv = document.createElement('div');
        expenseDiv.className = 'expense-card';
        expenseDiv.style.cssText = 'display: flex; justify-content: space-between; align-items: center; padding: 12px; border: 1px solid #e5e7eb; border-radius: 6px; margin-bottom: 8px; background: white;';

        const periodText = expense.period_type === 'months' ? '–º–µ—Å' : '–ª–µ—Ç';
        const originalAmount = `‚Ç¥${expense.amount}/${expense.period} ${periodText}`;

        expenseDiv.innerHTML = `
            <div>
                <div class="font-medium">üí∏ ${expense.name}</div>
                <div class="text-sm text-gray-500">
                    ${originalAmount} ‚Üí ‚Ç¥${(expense.monthly_amount || 0).toFixed(2)}/–º–µ—Å
                </div>
            </div>
            <div class="flex gap-2">
                <button class="btn btn-primary btn-small" onclick="editExpense(${expense.id})">‚úèÔ∏è</button>
                <button class="btn btn-danger btn-small" onclick="deleteExpense(${expense.id})">üóëÔ∏è</button>
            </div>
        `;
        container.appendChild(expenseDiv);
    });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞–º–∏
function showAddClientForm() {
    document.getElementById('addClientForm').classList.remove('hidden');
}

function hideAddClientForm() {
    document.getElementById('addClientForm').classList.add('hidden');
    document.getElementById('clientName').value = '';
}

function showAddServiceForm() {
    document.getElementById('addServiceForm').classList.remove('hidden');
}

function hideAddServiceForm() {
    document.getElementById('addServiceForm').classList.add('hidden');
    document.getElementById('serviceName').value = '';
    document.getElementById('serviceDescription').value = '';
}

function hideEditClientForm() {
    document.getElementById('editClientForm').classList.add('hidden');
    editingClientId = null;
}

function hideEditServiceForm() {
    document.getElementById('editServiceForm').classList.add('hidden');
    editingServiceId = null;
}

function hideEditExpenseForm() {
    document.getElementById('editExpenseForm').classList.add('hidden');
    editingExpenseId = null;
}

function hideAssignServiceForm() {
    document.getElementById('assignServiceForm').classList.add('hidden');
    assigningServiceId = null;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function showEditTab(tabName, clickedTab) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('#editClientForm .tab').forEach(tab => {
        tab.classList.remove('active');
    });
    clickedTab.classList.add('active');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    document.getElementById('editServicesTab').classList.toggle('hidden', tabName !== 'services');
    document.getElementById('editEquipmentTab').classList.toggle('hidden', tabName !== 'equipment');
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞–º
function assignServiceToClients(serviceId) {
    assigningServiceId = serviceId;
    const service = services.find(s => s.id === serviceId);
    if (!service) return;

    document.getElementById('assignServiceName').textContent = service.name;

    const clientsEditor = document.getElementById('serviceClientsEditor');
    clientsEditor.innerHTML = '';

    clients.forEach(client => {
        const clientService = client.services?.[service.name];
        const isActive = clientService?.Use === 1;

        const clientDiv = document.createElement('div');
        clientDiv.className = `service-checkbox ${isActive ? 'active' : ''}`;

        clientDiv.innerHTML = `
            <input type="checkbox" 
                   id="client_${client.id}" 
                   ${isActive ? 'checked' : ''}
                   onchange="toggleClientCheckbox(this, ${client.id})">
            <div style="flex: 1;">
                <div class="font-medium">üè¢ ${client.name}</div>
                <div class="text-xs text-gray-500">
                    ${Object.keys(client.services || {}).filter(s => client.services[s]?.Use === 1).length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                </div>
            </div>
        `;
        clientsEditor.appendChild(clientDiv);
    });

    document.getElementById('assignServiceForm').classList.remove('hidden');
    document.getElementById('assignServiceForm').scrollIntoView({ behavior: 'smooth' });
}

function toggleClientCheckbox(checkbox, clientId) {
    const clientDiv = checkbox.parentElement;
    if (checkbox.checked) {
        clientDiv.classList.add('active');
    } else {
        clientDiv.classList.remove('active');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞–º
async function saveServiceAssignments() {
    if (!assigningServiceId) return;

    const service = services.find(s => s.id === assigningServiceId);
    if (!service) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const updatePromises = clients.map(async (client) => {
        const checkbox = document.getElementById(`client_${client.id}`);
        if (!checkbox) return;

        const updatedServices = { ...client.services };

        if (checkbox.checked) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç—É
            updatedServices[service.name] = {
                Use: 1,
                Description: service.description || '',
                Type: service.type || 'SaaS',
                Quality: service.quality || 'Medium',
                Weight: service.weight || 1
            };
        } else {
            // –£–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å —É –∫–ª–∏–µ–Ω—Ç–∞
            delete updatedServices[service.name];
        }

        try {
            await apiCall('PUT', `/api/clients/${client.id}`, {
                name: client.name,
                metadata: client.metadata || {},
                services: updatedServices
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${client.name}:`, error);
            throw error;
        }
    });

    try {
        await Promise.all(updatePromises);
        showMessage(`–°–µ—Ä–≤–∏—Å "${service.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º`);
        hideAssignServiceForm();
        await init(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞', 'error');
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
function editClient(clientId) {
    editingClientId = clientId;
    const client = clients.find(c => c.id === clientId);
    if (!client) return;

    document.getElementById('editClientName').textContent = client.name;

    // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
    renderClientServicesEditor(client);

    // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    renderEquipmentEditor(client);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById('editClientForm').classList.remove('hidden');
    showEditTab('services', document.getElementById('servicesTab'));
}

// –†–µ–Ω–¥–µ—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
function renderClientServicesEditor(client) {
    const servicesEditor = document.getElementById('clientServicesEditor');
    servicesEditor.innerHTML = '';

    services.forEach(service => {
        const clientService = client.services?.[service.name];
        const isActive = clientService?.Use === 1;

        const serviceDiv = document.createElement('div');
        serviceDiv.className = `service-checkbox ${isActive ? 'active' : ''}`;

        serviceDiv.innerHTML = `
            <input type="checkbox" 
                   id="service_${service.id}" 
                   ${isActive ? 'checked' : ''}
                   onchange="toggleServiceCheckbox(this, ${service.id})">
            <div style="flex: 1;">
                <div class="font-medium">${service.name}</div>
                <div class="text-xs text-gray-500">${service.type} | ${service.description}</div>
            </div>
        `;
        servicesEditor.appendChild(serviceDiv);
    });
}

function toggleServiceCheckbox(checkbox, serviceId) {
    const serviceDiv = checkbox.parentElement;
    if (checkbox.checked) {
        serviceDiv.classList.add('active');
    } else {
        serviceDiv.classList.remove('active');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ (—Å–µ—Ä–≤–∏—Å—ã + –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)
async function saveClientChanges() {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
    const updatedServices = {};
    services.forEach(service => {
        const checkbox = document.getElementById(`service_${service.id}`);
        if (checkbox) {
            updatedServices[service.name] = {
                Use: checkbox.checked ? 1 : 0,
                Description: service.description,
                Type: service.type,
                Quality: service.quality || 'Medium',
                Weight: service.weight || 1
            };
        }
    });

    try {
        await apiCall('PUT', `/api/clients/${editingClientId}`, {
            name: client.name,
            metadata: client.metadata || {},
            services: updatedServices
        });

        showMessage('–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
        hideEditClientForm();
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞', 'error');
    }
}

// –†–µ–Ω–¥–µ—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function renderEquipmentEditor(client) {
    const equipmentEditor = document.getElementById('equipmentEditor');
    equipmentEditor.innerHTML = '';

    const metadata = client.metadata || {};

    if (Object.keys(metadata).length === 0) {
        equipmentEditor.innerHTML = '<div style="text-align: center; padding: 20px; color: #6b7280;">–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ.</div>';
        return;
    }

    Object.entries(metadata).forEach(([categoryName, categoryData]) => {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'equipment-editor-category';

        const getEquipmentIcon = (category) => {
            const iconMap = {
                '—Ä–∞–±–æ—á–∏–µ_–º–µ—Å—Ç–∞': 'üíª',
                '–ø–µ—á–∞—Ç–Ω–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞': 'üñ®Ô∏è',
                '—Å–µ—Ç–µ–≤–æ–µ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': 'üåê',
                '–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ': 'üìπ',
                'ip_—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è': '‚òéÔ∏è',
                '—Å–µ—Ä–≤–µ—Ä–∞': 'üñ•Ô∏è',
                'storage': 'üíæ',
                '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 'üîí'
            };
            return iconMap[category] || '‚öôÔ∏è';
        };

        const icon = getEquipmentIcon(categoryName);
        const displayName = categoryName.replace(/_/g, ' ').replace(/^\w/, c => c.toUpperCase());

        let itemsHtml = '';
        let isComplexCategory = false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö - –Ω–æ–≤–∞—è (—Å –≤–µ—Å–∞–º–∏) –∏–ª–∏ —Å—Ç–∞—Ä–∞—è (–ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞)
        if (typeof categoryData === 'object' && categoryData !== null) {
            if (categoryData.count !== undefined && categoryData.weight !== undefined) {
                // –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –≤–µ—Å–æ–º
                itemsHtml = `
                    <div class="equipment-editor-item" style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 80px; gap: 8px; align-items: center;">
                        <span>${displayName}</span>
                        <input type="number"
                               value="${categoryData.count}"
                               min="0"
                               class="equipment-input"
                               style="width: 100%;"
                               onchange="updateSimpleEquipmentCount('${categoryName}', this.value, '${categoryData.weight}')">
                        <input type="number"
                               value="${categoryData.weight}"
                               min="0.1"
                               max="10"
                               step="0.1"
                               class="equipment-input"
                               style="width: 100%;"
                               onchange="updateSimpleEquipmentWeight('${categoryName}', '${categoryData.count}', this.value)">
                        <span class="text-xs text-gray-500">–ò—Ç–æ–≥: ${(categoryData.count * categoryData.weight).toFixed(1)}</span>
                        <button class="btn btn-danger btn-small" onclick="removeEquipmentCategory('${categoryName}')">üóëÔ∏è</button>
                    </div>
                `;
            } else {
                // –°–ª–æ–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                isComplexCategory = true;
                itemsHtml = Object.entries(categoryData).map(([itemName, itemData]) => {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞) –∏ –Ω–æ–≤–æ–≥–æ (–æ–±—ä–µ–∫—Ç—ã —Å count/weight)
                    let count, weight;
                    if (typeof itemData === 'object' && itemData.count !== undefined) {
                        count = itemData.count || 0;
                        weight = itemData.weight || 1;
                    } else {
                        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                        count = itemData || 0;
                        weight = 1; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–µ—Å
                    }

                    return `
                        <div class="equipment-editor-item" style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 80px; gap: 8px; align-items: center;">
                            <span>${itemName.replace(/_/g, ' ')}</span>
                            <input type="number"
                                   value="${count}"
                                   min="0"
                                   class="equipment-input"
                                   style="width: 100%;"
                                   onchange="updateEquipmentCount('${categoryName}', '${itemName}', this.value, '${weight}')">
                            <input type="number"
                                   value="${weight}"
                                   min="0.1"
                                   max="10"
                                   step="0.1"
                                   class="equipment-input"
                                   style="width: 100%;"
                                   onchange="updateEquipmentWeight('${categoryName}', '${itemName}', '${count}', this.value)">
                            <span class="text-xs text-gray-500">–ò—Ç–æ–≥: ${(count * weight).toFixed(1)}</span>
                            <button class="btn btn-danger btn-small" onclick="removeEquipmentItem('${categoryName}', '${itemName}')">üóëÔ∏è</button>
                        </div>
                    `;
                }).join('');
            }
        } else {
            // –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            itemsHtml = `
                <div class="equipment-editor-item" style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 80px; gap: 8px; align-items: center;">
                    <span>${displayName}</span>
                    <input type="number"
                           value="${categoryData}"
                           min="0"
                           class="equipment-input"
                           style="width: 100%;"
                           onchange="updateSimpleEquipmentCount('${categoryName}', this.value, '1')">
                    <input type="number"
                           value="1"
                           min="0.1"
                           max="10"
                           step="0.1"
                           class="equipment-input"
                           style="width: 100%;"
                           onchange="updateSimpleEquipmentWeight('${categoryName}', '${categoryData}', this.value)">
                    <span class="text-xs text-gray-500">–ò—Ç–æ–≥: ${categoryData}</span>
                    <button class="btn btn-danger btn-small" onclick="removeEquipmentCategory('${categoryName}')">üóëÔ∏è</button>
                </div>
            `;
        }

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        const headerHtml = isComplexCategory ? `
            <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 80px; gap: 8px; align-items: center; margin-bottom: 8px; font-size: 12px; color: #6b7280; font-weight: 500;">
                <span>–ù–∞–∑–≤–∞–Ω–∏–µ</span>
                <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
                <span>–í–µ—Å</span>
                <span>–ò—Ç–æ–≥–æ</span>
                <span></span>
            </div>
        ` : '';

        categoryDiv.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <h5 style="margin: 0; color: #374151;">${icon} ${displayName}</h5>
                ${isComplexCategory ?
                    `<button class="btn btn-danger btn-small" onclick="removeEquipmentCategory('${categoryName}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>` :
                    ''
                }
            </div>
            ${headerHtml}
            ${itemsHtml}
            ${isComplexCategory ?
                `<div style="margin-top: 10px; padding: 8px; background: #e0f2fe; border-radius: 4px; border: 1px dashed #0284c7;">
                    <button class="btn btn-primary btn-small" onclick="showAddItemForm('${categoryName}')" style="width: 100%;">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ "${displayName}"
                    </button>
                 </div>` :
                ''
            }
        `;

        equipmentEditor.appendChild(categoryDiv);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
function showAddItemForm(categoryName) {
    const existingForm = document.getElementById('addItemForm');
    if (existingForm) {
        existingForm.remove();
    }

    const categoryDiv = event.target.parentElement.parentElement;
    const formDiv = document.createElement('div');
    formDiv.id = 'addItemForm';
    formDiv.style.cssText = 'margin-top: 10px; padding: 10px; background: #e0f2fe; border-radius: 6px; border: 1px solid #0284c7;';

    formDiv.innerHTML = `
        <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 80px 80px; gap: 8px; align-items: center;">
            <input type="text"
                   id="addItemName"
                   placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"
                   style="padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;">
            <input type="number"
                   id="addItemCount"
                   placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                   min="1"
                   value="1"
                   style="padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;">
            <input type="number"
                   id="addItemWeight"
                   placeholder="–í–µ—Å"
                   min="0.1"
                   max="10"
                   step="0.1"
                   value="1"
                   style="padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;">
            <button class="btn btn-success btn-small" onclick="addItemToCategory('${categoryName}')">‚ûï</button>
            <button class="btn btn-secondary btn-small" onclick="cancelAddItem()">‚ùå</button>
        </div>
    `;

    categoryDiv.appendChild(formDiv);
    document.getElementById('addItemName').focus();
}
// –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
function addItemToCategory(categoryName) {
    const itemName = document.getElementById('addItemName').value.trim().replace(/\s+/g, '_').toLowerCase();
    const itemCount = parseInt(document.getElementById('addItemCount').value) || 1;
    const itemWeight = parseFloat(document.getElementById('addItemWeight').value) || 1;

    if (!itemName) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞', 'error');
        return;
    }

    if (itemCount <= 0) {
        showMessage('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }

    if (itemWeight <= 0) {
        showMessage('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }

    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    if (!client.metadata) client.metadata = {};
    if (!client.metadata[categoryName]) client.metadata[categoryName] = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –æ–±—ä–µ–∫—Ç
    if (typeof client.metadata[categoryName] !== 'object' || client.metadata[categoryName].count !== undefined) {
        // –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ª–æ–∂–Ω—É—é
        const oldValue = client.metadata[categoryName];
        client.metadata[categoryName] = {
            '—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ': oldValue
        };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç
    if (client.metadata[categoryName][itemName]) {
        showMessage(`–≠–ª–µ–º–µ–Ω—Ç "${itemName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'error');
        return;
    }

    client.metadata[categoryName][itemName] = {
        count: itemCount,
        weight: itemWeight
    };

    // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É –∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º
    cancelAddItem();
    renderEquipmentEditor(client);

    showMessage('–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
}
// –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
function cancelAddItem() {
    const formDiv = document.getElementById('addItemForm');
    if (formDiv) {
        formDiv.remove();
    }
}
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function addEquipmentItem() {
    const categoryName = document.getElementById('newCategoryName').value.trim().replace(/\s+/g, '_').toLowerCase();
    const itemName = document.getElementById('newItemName').value.trim().replace(/\s+/g, '_').toLowerCase();
    const itemCount = parseInt(document.getElementById('newItemCount').value) || 1;
    const itemWeight = parseFloat(document.getElementById('newItemWeight').value) || 1;

    if (!categoryName) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error');
        return;
    }

    if (itemCount <= 0) {
        showMessage('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }

    if (itemWeight <= 0) {
        showMessage('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }

    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    if (!client.metadata) client.metadata = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    const categoryExists = client.metadata[categoryName];

    if (itemName) {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (—Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        if (!categoryExists) {
            client.metadata[categoryName] = {};
        } else if (typeof client.metadata[categoryName] === 'object' && client.metadata[categoryName].count !== undefined) {
            // –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ª–æ–∂–Ω—É—é
            const oldValue = client.metadata[categoryName];
            client.metadata[categoryName] = {
                '–æ–±—â–∏–µ': oldValue
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç
        if (client.metadata[categoryName][itemName]) {
            showMessage(`–≠–ª–µ–º–µ–Ω—Ç "${itemName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}"`, 'error');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤–µ—Å–æ–º
        client.metadata[categoryName][itemName] = {
            count: itemCount,
            weight: itemWeight
        };
        showMessage(`–î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç "${itemName}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"`);
    } else {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –≤–µ—Å–æ–º)
        if (categoryExists) {
            showMessage(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'error');
            return;
        }

        client.metadata[categoryName] = {
            count: itemCount,
            weight: itemWeight
        };
        showMessage(`–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}"`);
    }

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    document.getElementById('newCategoryName').value = '';
    document.getElementById('newItemName').value = '';
    document.getElementById('newItemCount').value = '1';
    document.getElementById('newItemWeight').value = '1';

    // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    renderEquipmentEditor(client);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function updateEquipmentCount(categoryName, itemName, newCount, currentWeight) {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    const count = parseInt(newCount) || 0;
    const weight = parseFloat(currentWeight) || 1;

    if (count <= 0) {
        removeEquipmentItem(categoryName, itemName);
        return;
    }

    if (!client.metadata) client.metadata = {};
    if (!client.metadata[categoryName]) client.metadata[categoryName] = {};

    client.metadata[categoryName][itemName] = {
        count: count,
        weight: weight
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const totalSpan = event.target.parentElement.querySelector('.text-xs');
    if (totalSpan) {
        totalSpan.textContent = `–ò—Ç–æ–≥: ${(count * weight).toFixed(1)}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function updateEquipmentWeight(categoryName, itemName, currentCount, newWeight) {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    const count = parseInt(currentCount) || 0;
    const weight = parseFloat(newWeight) || 1;

    if (weight <= 0) {
        showMessage('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        event.target.value = 1;
        return;
    }

    if (!client.metadata) client.metadata = {};
    if (!client.metadata[categoryName]) client.metadata[categoryName] = {};

    client.metadata[categoryName][itemName] = {
        count: count,
        weight: weight
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const totalSpan = event.target.parentElement.querySelector('.text-xs');
    if (totalSpan) {
        totalSpan.textContent = `–ò—Ç–æ–≥: ${(count * weight).toFixed(1)}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function updateSimpleEquipmentCount(categoryName, newCount, currentWeight) {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    const count = parseInt(newCount) || 0;
    const weight = parseFloat(currentWeight) || 1;

    if (count <= 0) {
        removeEquipmentCategory(categoryName);
        return;
    }

    if (!client.metadata) client.metadata = {};
    client.metadata[categoryName] = {
        count: count,
        weight: weight
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const totalSpan = event.target.parentElement.querySelector('.text-xs');
    if (totalSpan) {
        totalSpan.textContent = `–ò—Ç–æ–≥: ${(count * weight).toFixed(1)}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function updateSimpleEquipmentWeight(categoryName, currentCount, newWeight) {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client) return;

    const count = parseInt(currentCount) || 0;
    const weight = parseFloat(newWeight) || 1;

    if (weight <= 0) {
        showMessage('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        event.target.value = 1;
        return;
    }

    if (!client.metadata) client.metadata = {};
    client.metadata[categoryName] = {
        count: count,
        weight: weight
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const totalSpan = event.target.parentElement.querySelector('.text-xs');
    if (totalSpan) {
        totalSpan.textContent = `–ò—Ç–æ–≥: ${(count * weight).toFixed(1)}`;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function removeEquipmentItem(categoryName, itemName) {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client || !client.metadata || !client.metadata[categoryName]) return;

    if (typeof client.metadata[categoryName] === 'object') {
        delete client.metadata[categoryName][itemName];

        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –µ—ë
        if (Object.keys(client.metadata[categoryName]).length === 0) {
            delete client.metadata[categoryName];
        }
    }

    renderEquipmentEditor(client);
    showMessage('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function removeEquipmentCategory(categoryName) {
    if (!editingClientId) return;

    const client = clients.find(c => c.id === editingClientId);
    if (!client || !client.metadata) return;

    delete client.metadata[categoryName];

    renderEquipmentEditor(client);
    showMessage('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
}


// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
function editService(serviceId) {
    editingServiceId = serviceId;
    const service = services.find(s => s.id === serviceId);
    if (!service) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞
    document.getElementById('editServiceName').textContent = service.name;
    document.getElementById('editServiceNameInput').value = service.name;
    document.getElementById('editServiceDescriptionInput').value = service.description || '';
    document.getElementById('editServiceTypeInput').value = service.type || 'SaaS';
    document.getElementById('editServiceWeightInput').value = service.weight || 1;
    document.getElementById('editServiceQualityInput').value = service.quality || 'Medium';
    document.getElementById('editServiceBasePriceInput').value = service.base_price || 0;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('editServiceForm').classList.remove('hidden');

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('editServiceForm').scrollIntoView({ behavior: 'smooth' });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞
async function saveServiceChanges() {
    if (!editingServiceId) return;

    const name = document.getElementById('editServiceNameInput').value.trim();
    const description = document.getElementById('editServiceDescriptionInput').value.trim();
    const type = document.getElementById('editServiceTypeInput').value;
    const weight = parseInt(document.getElementById('editServiceWeightInput').value) || 1;
    const quality = document.getElementById('editServiceQualityInput').value;
    const base_price = parseFloat(document.getElementById('editServiceBasePriceInput').value) || 0;

    if (!name) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞', 'error');
        return;
    }

    if (weight < 1 || weight > 5) {
        showMessage('–í–µ—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5', 'error');
        return;
    }

    try {
        await apiCall('PUT', `/api/services/${editingServiceId}`, {
            name,
            description,
            type,
            weight,
            quality,
            base_price
        });

        showMessage('–°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
        hideEditServiceForm();
        await init(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞', 'error');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
async function deleteService(serviceId) {
    const service = services.find(s => s.id === serviceId);
    if (!service) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    const clientsUsingService = clients.filter(client =>
        client.services && client.services[service.name]?.Use === 1
    );

    let confirmMessage = `–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å "${service.name}"?`;
    if (clientsUsingService.length > 0) {
        confirmMessage += `\n\n–í–Ω–∏–º–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${clientsUsingService.length} –∫–ª–∏–µ–Ω—Ç–∞–º–∏:\n${clientsUsingService.map(c => c.name).join(', ')}\n\n–°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤.`;
    }

    if (!confirm(confirmMessage)) return;

    try {
        await apiCall('DELETE', `/api/services/${serviceId}`);
        showMessage(`–°–µ—Ä–≤–∏—Å "${service.name}" —É–¥–∞–ª–µ–Ω`);
        await init(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞', 'error');
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
function editExpense(expenseId) {
    editingExpenseId = expenseId;
    const expense = expenses.find(e => e.id === expenseId);
    if (!expense) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç—ã
    document.getElementById('editExpenseName').textContent = expense.name;
    document.getElementById('editExpenseNameInput').value = expense.name;
    document.getElementById('editExpenseAmountInput').value = expense.amount || 0;
    document.getElementById('editExpensePeriodInput').value = expense.period || 1;
    document.getElementById('editExpensePeriodTypeInput').value = expense.period_type || 'months';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('editExpenseForm').classList.remove('hidden');

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('editExpenseForm').scrollIntoView({ behavior: 'smooth' });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞—Ç—Ä–∞—Ç—ã
async function saveExpenseChanges() {
    if (!editingExpenseId) return;

    const name = document.getElementById('editExpenseNameInput').value.trim();
    const amount = parseFloat(document.getElementById('editExpenseAmountInput').value) || 0;
    const period = parseInt(document.getElementById('editExpensePeriodInput').value) || 1;
    const period_type = document.getElementById('editExpensePeriodTypeInput').value;

    if (!name) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã', 'error');
        return;
    }

    if (amount <= 0) {
        showMessage('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }

    if (period <= 0) {
        showMessage('–ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }

    try {
        await apiCall('PUT', `/api/expenses/${editingExpenseId}`, {
            name,
            amount,
            period,
            period_type
        });

        showMessage('–ó–∞—Ç—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        hideEditExpenseForm();
        await init(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç—ã:', error);
        showMessage('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç—ã', 'error');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
async function deleteExpense(expenseId) {
    const expense = expenses.find(e => e.id === expenseId);
    if (!expense) return;

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—É "${expense.name}"?\n\n–°—É–º–º–∞: $${expense.amount} –∑–∞ ${expense.period} ${expense.period_type === 'months' ? '–º–µ—Å' : '–ª–µ—Ç'}`)) return;

    try {
        await apiCall('DELETE', `/api/expenses/${expenseId}`);
        showMessage(`–ó–∞—Ç—Ä–∞—Ç–∞ "${expense.name}" —É–¥–∞–ª–µ–Ω–∞`);
        await init(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç—ã:', error);
        showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç—ã', 'error');
    }
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
async function addClient() {
    const name = document.getElementById('clientName').value.trim();
    if (!name) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', 'error');
        return;
    }

    try {
        await apiCall('POST', '/api/clients', { name, metadata: {}, services: {} });
        showMessage('–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
        hideAddClientForm();
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
    }
}

async function deleteClient(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?')) return;

    try {
        await apiCall('DELETE', `/api/clients/${id}`);
        showMessage('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
    }
}

async function addService() {
    const name = document.getElementById('serviceName').value.trim();
    const description = document.getElementById('serviceDescription').value.trim();
    const type = document.getElementById('serviceType').value;
    const weight = parseInt(document.getElementById('serviceWeight').value) || 1;

    if (!name) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞', 'error');
        return;
    }

    try {
        await apiCall('POST', '/api/services', { name, description, type, weight, quality: 'Medium', base_price: 0 });
        showMessage('–°–µ—Ä–≤–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω');
        hideAddServiceForm();
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
    }
}

async function addEmployee() {
    const name = document.getElementById('employeeName').value.trim();
    const salary = parseFloat(document.getElementById('employeeSalary').value) || 0;

    if (!name) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'error');
        return;
    }

    if (salary <= 0) {
        showMessage('–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0‚Ç¥', 'error');
        return;
    }

    if (salary < 15000) {
        showMessage('–ó–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π (–º–∏–Ω–∏–º—É–º ~15000‚Ç¥)', 'error');
        return;
    }

    try {
        await apiCall('POST', '/api/employees', { name, salary, supported_services: [] });
        showMessage('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
        document.getElementById('employeeName').value = '';
        document.getElementById('employeeSalary').value = '';
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    }
}

async function addExpense() {
    const name = document.getElementById('expenseName').value.trim();
    const amount = parseFloat(document.getElementById('expenseAmount').value) || 0;
    const period = parseInt(document.getElementById('expensePeriod').value) || 1;
    const periodType = document.getElementById('expensePeriodType').value;

    if (!name || amount <= 0) {
        showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
        return;
    }

    try {
        await apiCall('POST', '/api/expenses', { name, amount, period, period_type: periodType });
        showMessage('–ó–∞—Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        document.getElementById('expenseName').value = '';
        document.getElementById('expenseAmount').value = '';
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç—ã:', error);
    }
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–≤
async function calculatePrices() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        const employees = await apiCall('GET', '/api/employees');
        const expenses = await apiCall('GET', '/api/expenses');
        const services = await apiCall('GET', '/api/services');
        const clients = await apiCall('GET', '/api/clients');
        const settings = await apiCall('GET', '/api/financial-settings');

        // –ö—É—Ä—Å –≤–∞–ª—é—Ç (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º)
        const USD_TO_UAH = 41; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ –≥—Ä–∏–≤–Ω–µ

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –≥—Ä–∏–≤–Ω–∞—Ö
        const totalEmployeeCosts = employees.reduce((sum, emp) => sum + (emp.salary || 0), 0); // —É–∂–µ –≤ –≥—Ä–∏–≤–Ω–∞—Ö
        const totalExpensesUSD = expenses.reduce((sum, exp) => sum + (exp.monthly_amount || 0), 0); // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        const totalExpensesUAH = totalExpensesUSD * USD_TO_UAH; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–∏–≤–Ω—ã
        const totalMonthlyCosts = totalEmployeeCosts + totalExpensesUAH; // –≤—Å–µ –≤ –≥—Ä–∏–≤–Ω–∞—Ö

        if (totalMonthlyCosts <= 0) {
            showMessage('–î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∑–∞—Ç—Ä–∞—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω', 'error');
            return;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        function calculateEquipmentWeight(metadata) {
            let totalWeight = 0;

            Object.values(metadata || {}).forEach(categoryData => {
                if (typeof categoryData === 'object' && categoryData !== null) {
                    if (categoryData.count !== undefined && categoryData.weight !== undefined) {
                        // –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –≤–µ—Å–æ–º
                        totalWeight += categoryData.count * categoryData.weight;
                    } else {
                        // –°–ª–æ–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                        Object.values(categoryData).forEach(itemData => {
                            if (typeof itemData === 'object' && itemData.count !== undefined) {
                                totalWeight += itemData.count * itemData.weight;
                            } else {
                                // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –≤–µ—Å = 1
                                totalWeight += (parseInt(itemData) || 0) * 1;
                            }
                        });
                    }
                } else {
                    // –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –≤–µ—Å = 1
                    totalWeight += (parseInt(categoryData) || 0) * 1;
                }
            });

            return totalWeight;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        function calculateServicesWeight(clientServices) {
            let totalWeight = 0;

            Object.entries(clientServices || {}).forEach(([serviceName, serviceData]) => {
                if (serviceData.Use === 1) {
                    const service = services.find(s => s.name === serviceName);
                    if (service) {
                        totalWeight += service.weight || 1;
                    }
                }
            });

            return totalWeight;
        }

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –≤–µ—Å –Ω–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        let totalSystemWeight = 0;
        const clientWeights = {};

        clients.forEach(client => {
            const equipmentWeight = calculateEquipmentWeight(client.metadata);
            const servicesWeight = calculateServicesWeight(client.services);
            const clientTotalWeight = equipmentWeight + servicesWeight;

            clientWeights[client.id] = {
                equipment: equipmentWeight,
                services: servicesWeight,
                total: clientTotalWeight
            };

            totalSystemWeight += clientTotalWeight;
        });

        if (totalSystemWeight <= 0) {
            showMessage('–£ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞', 'error');
            return;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const profitMargin = (settings?.profit_margin || 20) / 100;
        const clientPrices = {};

        clients.forEach(client => {
            const clientWeight = clientWeights[client.id];
            if (clientWeight.total > 0) {
                // –î–æ–ª—è –∑–∞—Ç—Ä–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –µ–≥–æ –≤–µ—Å—É
                const costShare = totalMonthlyCosts * (clientWeight.total / totalSystemWeight);
                const priceWithMargin = costShare * (1 + profitMargin);

                clientPrices[client.id] = {
                    name: client.name,
                    equipmentWeight: clientWeight.equipment,
                    servicesWeight: clientWeight.services,
                    totalWeight: clientWeight.total,
                    costShare: costShare,
                    finalPrice: priceWithMargin,
                    weightPercentage: (clientWeight.total / totalSystemWeight * 100)
                };
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
        showPricingResults(clientPrices, totalMonthlyCosts, totalSystemWeight, profitMargin, USD_TO_UAH);

        showMessage('–†–∞—Å—á–µ—Ç —Ü–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω:', error);
        showMessage('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω', 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
function showPricingResults(clientPrices, totalCosts, totalWeight, margin) {
    const resultsHtml = `
        <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border: 2px solid #22c55e;">
            <h3 style="color: #22c55e; margin-bottom: 15px;">üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã—Ö —Ü–µ–Ω</h3>

            <div style="background: #f0fdf4; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
                <h4>üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
                <p><strong>–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏:</strong> ${totalCosts.toFixed(2)}/–º–µ—Å</p>
                <p><strong>–û–±—â–∏–π –≤–µ—Å —Å–∏—Å—Ç–µ–º—ã:</strong> ${totalWeight.toFixed(1)} –µ–¥–∏–Ω–∏—Ü —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</p>
                <p><strong>–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏:</strong> ${(margin * 100).toFixed(1)}%</p>
                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</strong> ${(totalCosts / totalWeight).toFixed(2)}/–º–µ—Å</p>
            </div>

            <div style="background: #eff6ff; padding: 15px; border-radius: 6px;">
                <h4>üè¢ –¶–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:</h4>
                ${Object.values(clientPrices).map(client => `
                    <div style="background: white; padding: 12px; margin: 8px 0; border-radius: 6px; border-left: 4px solid #3b82f6;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <strong>${client.name}</strong>
                            <span style="font-size: 18px; font-weight: bold; color: #22c55e;">${client.finalPrice.toFixed(2)}/–º–µ—Å</span>
                        </div>
                        <div style="font-size: 13px; color: #6b7280;">
                            <span>üîß –°–µ—Ä–≤–∏—Å—ã: ${client.servicesWeight.toFixed(1)} | </span>
                            <span>üìä –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${client.equipmentWeight.toFixed(1)} | </span>
                            <span>‚öñÔ∏è –ò—Ç–æ–≥–æ: ${client.totalWeight.toFixed(1)} (${client.weightPercentage.toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞)</span>
                        </div>
                        <div style="font-size: 13px; color: #059669; margin-top: 4px;">
                            –î–æ–ª—è –∑–∞—Ç—Ä–∞—Ç: ${client.costShare.toFixed(2)} + –º–∞—Ä–∂–∞ ${(margin * 100).toFixed(1)}% = ${client.finalPrice.toFixed(2)}
                        </div>
                    </div>
                `).join('')}
            </div>

            <div style="margin-top: 15px; padding: 10px; background: #fef3c7; border-radius: 6px; font-size: 14px;">
                <strong>üí° –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞—Å—á–µ—Ç–∞:</strong> –¶–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
                –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–µ—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ß–µ–º —Å–ª–æ–∂–Ω–µ–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Ç–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞.
            </div>
        </div>
    `;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–¥–µ–ª–æ–º –∑–∞—Ç—Ä–∞—Ç
    const financeCard = document.getElementById('tab-finance');
    const existingResults = financeCard.querySelector('.pricing-results');
    if (existingResults) {
        existingResults.remove();
    }

    const resultsDiv = document.createElement('div');
    resultsDiv.className = 'pricing-results';
    resultsDiv.innerHTML = resultsHtml;

    const expensesSection = financeCard.querySelector('h3');
    expensesSection.parentNode.insertBefore(resultsDiv, expensesSection);
}

// –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç
async function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.name.toLowerCase().endsWith('.json')) {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª', 'error');
        return;
    }

    try {
        showMessage('–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', 'info');
        const text = await file.text();
        const data = JSON.parse(text);

        const result = await apiCall('POST', '/api/import-data', data);
        showMessage(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.imported.clients} –∫–ª–∏–µ–Ω—Ç–æ–≤, ${result.imported.services} —Å–µ—Ä–≤–∏—Å–æ–≤`);
        await init();
    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message, 'error');
    }
}

async function exportData() {
    try {
        const data = await apiCall('GET', '/api/export-data');

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `service_management_export_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        showMessage('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    }
}

async function importDemoData() {
    const demoData = {
        "–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è": [
            {
                "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è": "HD B-EAST",
                "—Ä–∞–±–æ—á–∏–µ_–º–µ—Å—Ç–∞": {
                    "—Ç–æ–Ω–∫–∏–µ_–∫–ª–∏–µ–Ω—Ç—ã": { "count": 60, "weight": 0.8 },
                    "–Ω–æ—É—Ç–±—É–∫–∏": { "count": 40, "weight": 2.0 },
                    "–¥–µ—Å–∫—Ç–æ–ø—ã": { "count": 105, "weight": 1.2 }
                },
                "–ø–µ—á–∞—Ç–Ω–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞": {
                    "–ø—Ä–∏–Ω—Ç–µ—Ä—ã": { "count": 30, "weight": 1.0 },
                    "–ú–§–£": { "count": 15, "weight": 2.5 },
                    "–≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ": { "count": 8, "weight": 8.0 }
                },
                "—Å–µ—Ç–µ–≤–æ–µ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {
                    "cisco": { "count": 42, "weight": 3.5 }
                },
                "–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ": {
                    "ip_–∫–∞–º–µ—Ä—ã": { "count": 139, "weight": 0.3 },
                    "–≤–∏–¥–µ–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã": { "count": 4, "weight": 2.5 }
                },
                "ip_—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è": {
                    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ_—Ç–µ–ª–µ—Ñ–æ–Ω—ã": { "count": 68, "weight": 0.4 },
                    "—Ç–µ–ª–µ—Ñ–æ–Ω—ã_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π": { "count": 4, "weight": 1.0 }
                },
                "SaaS —Å–µ—Ä–≤–∏—Å—ã": {
                    "1–°_–£–ü–ü –ø–æ–¥–¥–µ—Ä–∂–∫–∞": {"Use": 1, "Description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1C", "Type": "SaaS", "Quality": "High", "Weight": 4},
                    "GWS": {"Use": 1, "Description": "Google Workspace", "Type": "SaaS", "Quality": "High", "Weight": 1},
                    "Office 365": {"Use": 1, "Description": "Microsoft Office 365", "Type": "SaaS", "Quality": "High", "Weight": 1}
                },
                "IaaS —Å–µ—Ä–≤—ñ—Å–∏": {
                    "Windows AD": {"Use": 1, "Description": "Active Directory", "Type": "IaaS", "Weight": 5},
                    "Backup": {"Use": 1, "Description": "–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "Type": "IaaS", "Weight": 3}
                }
            },
            {
                "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è": "TechCorp Ltd",
                "—Ä–∞–±–æ—á–∏–µ_–º–µ—Å—Ç–∞": {
                    "–Ω–æ—É—Ç–±—É–∫–∏": { "count": 25, "weight": 2.0 },
                    "–¥–µ—Å–∫—Ç–æ–ø—ã": { "count": 15, "weight": 1.2 },
                    "–º–æ–±–∏–ª—å–Ω—ã–µ_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": { "count": 30, "weight": 1.5 }
                },
                "–ø–µ—á–∞—Ç–Ω–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞": {
                    "–ø—Ä–∏–Ω—Ç–µ—Ä—ã": { "count": 8, "weight": 1.0 },
                    "–ú–§–£": { "count": 3, "weight": 2.5 }
                },
                "—Å–µ—Ç–µ–≤–æ–µ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {
                    "mikrotik": { "count": 12, "weight": 3.0 },
                    "ubiquiti": { "count": 8, "weight": 2.5 }
                },
                "—Å–µ—Ä–≤–µ—Ä–∞": {
                    "—Ñ–∞–π–ª–æ–≤—ã–µ_—Å–µ—Ä–≤–µ—Ä—ã": { "count": 2, "weight": 3.0 },
                    "web_—Å–µ—Ä–≤–µ—Ä—ã": { "count": 1, "weight": 4.0 }
                },
                "SaaS —Å–µ—Ä–≤–∏—Å—ã": {
                    "GWS": {"Use": 1, "Description": "Google Workspace", "Type": "SaaS", "Quality": "High", "Weight": 1},
                    "Slack": {"Use": 1, "Description": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", "Type": "SaaS", "Quality": "Medium", "Weight": 1}
                },
                "IaaS —Å–µ—Ä–≤—ñ—Å–∏": {
                    "Cloud Storage": {"Use": 1, "Description": "–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "Type": "IaaS", "Weight": 2}
                }
            },
            {
                "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è": "Small Office",
                "—Ä–∞–±–æ—á–∏–µ_–º–µ—Å—Ç–∞": {
                    "–Ω–æ—É—Ç–±—É–∫–∏": { "count": 5, "weight": 2.0 },
                    "–ø–ª–∞–Ω—à–µ—Ç—ã": { "count": 3, "weight": 1.0 }
                },
                "–ø–µ—á–∞—Ç–Ω–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞": {
                    "–ø—Ä–∏–Ω—Ç–µ—Ä—ã": { "count": 1, "weight": 1.0 }
                },
                "SaaS —Å–µ—Ä–≤–∏—Å—ã": {
                    "GWS": {"Use": 1, "Description": "Google Workspace", "Type": "SaaS", "Quality": "High", "Weight": 1}
                }
            }
        ]
    };

    try {
        const result = await apiCall('POST', '/api/import-data', demoData);
        showMessage(`–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${result.imported.clients} –∫–ª–∏–µ–Ω—Ç–æ–≤, ${result.imported.services} —Å–µ—Ä–≤–∏—Å–æ–≤`);
        await init();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', init);
